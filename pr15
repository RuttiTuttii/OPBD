### Решения для Практической работы №15 (MS SQL Server)

---

#### **5.1. Округление цен книг до десятков**
```sql
UPDATE Книги 
SET цена = ROUND(цена, -1);
```
*Пояснение:* `ROUND(цена, -1)` округляет число до десятков (137 → 140).

---

#### **5.2. Количество заказов по месяцам/годам**
```sql
SELECT
    YEAR(дата_заказа) AS Год,
    MONTH(дата_заказа) AS Месяц,
    COUNT(*) AS Заказов
FROM Заказы
GROUP BY YEAR(дата_заказа), MONTH(дата_заказа)
ORDER BY Год DESC, Месяц DESC;
```

---

#### **5.3. Снижение цены книг без заказов в текущем году**
```sql
UPDATE Книги 
SET цена = цена * 0.9
WHERE код_книги NOT IN (
    SELECT код_книги 
    FROM СоставыЗаказов
    WHERE номер_заказа IN (
        SELECT номер_заказа 
        FROM Заказы 
        WHERE YEAR(дата_заказа) = YEAR(GETDATE())
    )
);
```

---

#### **5.4. Форматирование ФИ заказчика**
```sql
SELECT 
    код_заказчика,
    UPPER(фамилия) + ' ' + UPPER(LEFT(имя, 1)) + '.' AS ФИ
FROM Заказчики;
```

---

#### **5.5. Очистка логинов**
```sql
UPDATE Заказчики
SET логин = REPLACE(TRIM(логин), ' ', '_');
```
*Пояснение:*  
- `TRIM()` удаляет пробелы в начале/конце  
- `REPLACE(..., ' ', '_')` заменяет внутренние пробелы на подчёркивания.

---

#### **5.6. Обработка NULL в данных заказчиков**
```sql
SELECT 
    фамилия, 
    имя, 
    COALESCE(NULLIF(телефон, ''), '–') AS Телефон,
    NULLIF(адрес, '') AS Адрес
FROM Заказчики;
```
*Пояснение:*  
- `NULLIF(телефон, '')` превращает пустую строку в `NULL`  
- `COALESCE(..., '–')` подставляет прочерк для `NULL`.

---

#### **5.7. Группировка книг по авторам**
```sql
SELECT
    CONCAT(Авторы.фамилия, ' ', Авторы.имя) AS Автор,
    STRING_AGG(Книги.название, ', ') WITHIN GROUP (ORDER BY Книги.название) AS Книги
FROM Книги
INNER JOIN Авторы ON Книги.код_автора = Авторы.код_автора
GROUP BY Авторы.фамилия, Авторы.имя;
```

---

#### **5.8. Группировка книг по заказам**
```sql
SELECT
    Заказы.номер_заказа,
    STRING_AGG(CONCAT(Авторы.фамилия, ' ', Книги.название), '; ') AS Автор_Книга
FROM СоставыЗаказов
INNER JOIN Книги ON СоставыЗаказов.код_книги = Книги.код_книги
INNER JOIN Авторы ON Книги.код_автора = Авторы.код_автора
INNER JOIN Заказы ON СоставыЗаказов.номер_заказа = Заказы.номер_заказа
GROUP BY Заказы.номер_заказа;
```

---

#### **5.9. Сквозная нумерация книг**
```sql
SELECT
    ROW_NUMBER() OVER (ORDER BY название) AS Номер,
    название
FROM Книги;
```

---

#### **5.10. Нумерация книг внутри жанров**
```sql
SELECT
    жанр,
    ROW_NUMBER() OVER (PARTITION BY жанр ORDER BY название) AS Номер_в_жанре,
    название
FROM Книги;
```

---

### Рекомендации по выполнению:
1. **Проверка данных перед UPDATE:**  
   Запустите `SELECT` с условием перед выполнением `UPDATE` (например, для 5.1 и 5.3).
2. **Текущий год в 5.3:**  
   `YEAR(GETDATE())` возвращает текущий год.
3. **Оконные функции (5.9-5.10):**  
   - `ROW_NUMBER()` присваивает уникальный номер  
   - `PARTITION BY` разделяет данные на группы (жанры).
4. **Группировка строк (5.7-5.8):**  
   `STRING_AGG` объединяет значения через разделитель (требует SQL Server 2017+).

> **Важно:** Замените названия таблиц/полей на фактические из вашей БД. Для 5.8 может потребоваться коррекция связей между таблицами.